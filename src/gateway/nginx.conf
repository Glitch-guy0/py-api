events {
    worker_connections 1024;
}

http {
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=3r/s;

    upstream auth_service {
        server auth_service:8000;
    }

    upstream user_service {
        server user_service:8000;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        
        # SSL configuration
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Rate limiting
        limit_req zone=mylimit burst=5;


        # Auth service routes
        location /oauth/ {
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # User service routes with auth check
        location /user {
            auth_request /auth_check;
            proxy_pass http://user_service;
            proxy_hide_header Host $host;
            proxy_hide_header X-Real-IP $remote_addr;
            proxy_hide_header X-Forwarded-Proto $scheme;
            
            # Error handling
            error_page 401 = @error401;
        }

        # Internal auth check endpoint
        location = /auth_check {
            internal;
            proxy_pass http://auth_service/oauth/v2/okta/authenticate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_intercept_errors on;
            error_page 401 = @error401;
        }

        # Handle 401 unauthorized errors
        location @error401 {
            return 401 '{"error": "Unauthorized"}';
            add_header Content-Type application/json;
        }
    }
}
